fn main() {
    print("=== Dynamic Array Tests ===")

    // ✅ Should pass
    var a = [10,20,[1,2],[1,2]]
    print(a) 

    var b = ["fds",[1,2],[1,"ewr"]]
    print(b)

    var c = [null,"fds",[1,2],[1,"ewr"]]
    print(c)

    // ⚠️ Safe access (runtime can fail if not array)
    print(a[2][0])  // should print 1
    a[2][0] = 99    // should work

    // ✅ Mixed assignment
    var d = [1,[1,2],3,4]
    d[1] = 10
    d[2] = [1,2]
    d[3] = [[1,2],[1,2.3]]
    print(d)

    print("=== Strict Typed Arrays ===")

    var z:array<int> = [1,2,3]
    z[2] = 2   // ✅
      // z[2] = "str"  // ❌ Compile-time error, uncomment to test

    print(z)

    print("=== Nullable & Multidimensional ===")

    var y:array<int?>?;
    y = [1,2,3,null]
    print(y)

    // ⚠️ Multidimension (not fully supported yet)
    var e:array<array<int> ?> ?
    e = [[1,2],[1],null]
    print(e)

    var w:array<array<int?> ?> ?
    w = [[1,2],[1,null],null]
    print(w)

    // Edge variant
    // w = [[1,2],[1],null] 

    print("=== Immutability ===")

    let imm = [1,"fds",[1,2],4]
    print(imm)
    // imm[1] = 2  // ❌ Should throw immutability error
    print(imm[2][1]) // ✅ Can read

    print("=== Edge Cases ===")

    var empty = []
    print(empty)

    var emptyTyped:array<int>?
    print(emptyTyped)

    // var bad:array<int> = [null] // ❌ Compile-time error

    var good:array<int?> = [null]
    print(good)

    // Out of bounds
    var x = [1,2,3]
    // x[999] = 10  // ⚠️ Runtime error if uncommented

    // Nullable assignment
    var nn:array<int>? 
    nn = null      // ✅ allowed
    print(nn)

    var nn2:array<int?>? 
     nn2 = [1,2,null]   // should work

    print("=== Tests Complete ===")
}
