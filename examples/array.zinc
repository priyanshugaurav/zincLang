fn main() {
    let c = [1,2,3,4,5,9]   //should be dynamic with contant as declared with let nad should be initialized at declaration as immutable 
    let g:int[3][2] = [  //multidimension with fixed size
        [1,2],
        [3,4],
        [1,2]
    ]
    let d:int[] = [1,2,34,4] //strict type
    let e:int[2] = [1,2] //fixed size

    //multidimension
    let f = [[1,2],[3,4] , [4,5,6]] //dimension not fixed can be anything

      let h:int[][] = [  //multidimension with auto sizing
        [1,2,3],
        [1,2,3],
        [2,3,4]
    ]



    //for vars not necesarily initialized at same line and is mutable

    var i = [1,2.2,"fs"]  //any type and is mutable
    var j:int[] = [1,2,3] //should be strict type
    var k:int[][] = [     //should be dyanmic sizing
        [1,2,3],
        [1,2,3],
        [2,3,4]
    ]
    var l:int[2][2] = [  //fixed sizing but mutable
        [1,2],
        [2,3]
    ]

    var y;
    y = 10

    var m:int[3][2];  //fixed col sizing but row can be dynamic and nullable
    m = [
        [1,2],
        [2,3],
        [4,5]
    ]




    //accessing 

    a[2] //second index
    a[-1] //last index
    a[1][2] //for multi dimension

    //change/reinitalization only for var as they are mutable

    a[2] = 10 //should perform type checking if strictly typed
    a[1][3] = 30 //same for multidimension should check if strictly typed


      var z:int?[?][?]; //both row and col is dynamic and nullable
    z = [
        [1,2,null],
        [null,2,3]
    ]


    //multidimension can be 3d , 4d ,5d and so on .....

  
}
